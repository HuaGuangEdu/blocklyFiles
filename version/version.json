[
    [
        {
            "libraryVersion": "0.5.2",
            "libraryName": "control-scnu"
        },
        {
            "libraryVersion": "2.2.2",
            "libraryName": "BlocklyFile"
        }
    ],
    [
        {
            "libraryName": "create_img",
            "libraryList": [
                "ALPHABET",
                "alphabet",
                "angle_type",
                "creat_number_img",
                "font_type",
                "fontsize",
                "getRandomColor",
                "getangle",
                "getfont",
                "getlocation",
                "image_size",
                "number"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "creat_number_img",
            "libraryList": [],
            "parameterList": [
                "num",
                "path"
            ],
            "Type": "Function"
        },
        {
            "libraryName": "getRandomColor",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        },
        {
            "libraryName": "getangle",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        },
        {
            "libraryName": "getfont",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        },
        {
            "libraryName": "getlocation",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        }
    ],
    [
        {
            "libraryName": "file_operation",
            "libraryList": [
                "CSV",
                "Common_file",
                "Json",
                "f_path",
                "file_path",
                "main_path",
                "system_platform"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "CSV",
            "libraryList": [
                "dropna",
                "fillna",
                "get_a_column",
                "get_a_row",
                "get_directory",
                "print_describe",
                "print_head",
                "print_tail",
                "close",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines",
                "close",
                "dump",
                "load",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines"
            ],
            "parameterList": [
                "file_name"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Common_file",
            "libraryList": [
                "dropna",
                "fillna",
                "get_a_column",
                "get_a_row",
                "get_directory",
                "print_describe",
                "print_head",
                "print_tail",
                "close",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines",
                "close",
                "dump",
                "load",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines"
            ],
            "parameterList": [
                "file_name",
                "mode"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Json",
            "libraryList": [
                "dropna",
                "fillna",
                "get_a_column",
                "get_a_row",
                "get_directory",
                "print_describe",
                "print_head",
                "print_tail",
                "close",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines",
                "close",
                "dump",
                "load",
                "read_a_line",
                "read_all",
                "read_random_line",
                "seek",
                "tell",
                "write",
                "write_lines"
            ],
            "parameterList": [
                "file_name",
                "mode"
            ],
            "Type": "Class"
        }
    ],
    [
        {
            "libraryName": "gpio",
            "libraryList": [
                "Beep",
                "CSB",
                "HongWai",
                "IO2GPIO",
                "Io",
                "IoToPwm",
                "Led",
                "Mecanum_wheel",
                "PWM",
                "PWM2GPIO",
                "TempHump",
                "UW_IO",
                "division",
                "old_fb",
                "old_lr",
                "old_tn",
                "servo",
                "system_platform"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Beep",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "beep_io"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "CSB",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "uw_num"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "HongWai",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "ir_io"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Io",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "io_num"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "IoToPwm",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "io_num",
                "freq",
                "duty"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Led",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "led_io"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Mecanum_wheel",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "PWM",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "pwm_io"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "TempHump",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "t_h_io"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "servo",
            "libraryList": [
                "beep_s",
                "close_b",
                "open_b",
                "_CSB__sent_t_pulse",
                "_CSB__wait_for_e",
                "get_distance",
                "get_return",
                "clean_io",
                "get_io_in",
                "set_in_out",
                "set_io_mode",
                "set_io_out",
                "end",
                "set_duty",
                "set_freq",
                "start",
                "closeled",
                "openled",
                "car_across_l",
                "car_across_r",
                "car_back",
                "car_circle_L",
                "car_circle_R",
                "car_contr",
                "car_go",
                "car_parallel_L_B",
                "car_parallel_L_F",
                "car_parallel_R_B",
                "car_parallel_R_F",
                "car_stop",
                "car_turn_l",
                "car_turn_r",
                "uart_init",
                "uart_receive",
                "xunxian",
                "change_duty",
                "change_freq",
                "pwm_start",
                "pwm_stop",
                "getTemp_Humi",
                "init_servo",
                "turn"
            ],
            "parameterList": [
                "pin"
            ],
            "Type": "Class"
        }
    ],
    [
        {
            "libraryName": "integration",
            "libraryList": [
                "case_line_patrol"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "case_line_patrol",
            "libraryList": [],
            "parameterList": [
                "m"
            ],
            "Type": "Function"
        }
    ],
    [
        {
            "libraryName": "machine_learning",
            "libraryList": [
                "Datasets",
                "DecisionTreeClassifier",
                "KNeighborsClassifier",
                "LogisticRegression",
                "Model_load",
                "MultinomialNB",
                "RandomForestClassifier",
                "SVM",
                "pic2csv",
                "picshow",
                "viedo_to_photo"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Datasets",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "DecisionTreeClassifier",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "max_depth",
                "min_samples_split",
                "min_samples_leaf",
                "min_weight_fraction_leaf",
                "random_state",
                "max_leaf_nodes",
                "tree"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "KNeighborsClassifier",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "n_neighbors",
                "KNeighborsClassifier"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "LogisticRegression",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "penalty",
                "r",
                "LogisticRegression",
                "solver"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "Model_load",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "path",
                "load",
                "model_path"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "MultinomialNB",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "alpha",
                "MultinomialNB"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "RandomForestClassifier",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "n_estimators",
                "max_depth",
                "RandomForestClassifier"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "SVM",
            "libraryList": [
                "MinMaxScaler",
                "PCA",
                "StandardScaler",
                "VarianceThreshold",
                "chi2",
                "csv_read",
                "data_get",
                "get_Built_data",
                "split",
                "split_get",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score",
                "cross_val_score",
                "fit",
                "get_cross_val_score",
                "get_score",
                "model_save",
                "predict",
                "score"
            ],
            "parameterList": [
                "kernel",
                "SVC"
            ],
            "Type": "Class"
        },
        {
            "libraryName": "pic2csv",
            "libraryList": [],
            "parameterList": [
                "pic_path",
                "csv_path"
            ],
            "Type": "Function"
        },
        {
            "libraryName": "picshow",
            "libraryList": [],
            "parameterList": [
                "pic_path",
                "j"
            ],
            "Type": "Function"
        },
        {
            "libraryName": "viedo_to_photo",
            "libraryList": [],
            "parameterList": [
                "n",
                "pic_num",
                "img_path",
                "img_name"
            ],
            "Type": "Function"
        }
    ],
    [
        {
            "libraryName": "shijue0",
            "libraryList": [
                "Assist_converse",
                "basicImg",
                "d_path",
                "dat_path",
                "deque",
                "file_path",
                "main_path",
                "model_path",
                "new_file",
                "pic_read",
                "picture_path",
                "system_platform"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Assist_converse",
            "libraryList": [
                "BGR2GRAY",
                "GRAY2BIN",
                "beauty_face",
                "bin_detect",
                "camera",
                "close_camera",
                "close_windows",
                "cnt_area",
                "cnt_center",
                "cnt_draw",
                "decodeDisplay",
                "delay",
                "detect",
                "dilation",
                "dotted_line1",
                "dotted_line2",
                "erosion",
                "erweima_detect",
                "find_Contour",
                "get_frame",
                "get_img",
                "img_flip",
                "img_type",
                "line_angle1",
                "line_angle2",
                "name_windows",
                "offset1",
                "offset2",
                "offset_calculate1",
                "offset_calculate2",
                "resize",
                "show_image",
                "write_image"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "basicImg",
            "libraryList": [
                "BGR2GRAY",
                "GRAY2BIN",
                "beauty_face",
                "bin_detect",
                "camera",
                "close_camera",
                "close_windows",
                "cnt_area",
                "cnt_center",
                "cnt_draw",
                "decodeDisplay",
                "delay",
                "detect",
                "dilation",
                "dotted_line1",
                "dotted_line2",
                "erosion",
                "erweima_detect",
                "find_Contour",
                "get_frame",
                "get_img",
                "img_flip",
                "img_type",
                "line_angle1",
                "line_angle2",
                "name_windows",
                "offset1",
                "offset2",
                "offset_calculate1",
                "offset_calculate2",
                "resize",
                "show_image",
                "write_image"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "new_file",
            "libraryList": [],
            "parameterList": [
                "path"
            ],
            "Type": "Function"
        },
        {
            "libraryName": "pic_read",
            "libraryList": [],
            "parameterList": [
                "filename",
                "mode"
            ],
            "Type": "Function"
        }
    ],
    [
        {
            "libraryName": "shijue1",
            "libraryList": [
                "Assist_converse",
                "Img",
                "basicImg",
                "d_path",
                "dat_path",
                "deque",
                "file_path",
                "items_dir",
                "items_num",
                "main_path",
                "model_path",
                "new_file",
                "picture_path",
                "system_platform"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Assist_converse",
            "libraryList": [
                "BGR2GRAY",
                "GRAY2BIN",
                "beauty_face",
                "bin_detect",
                "body_init",
                "body_part_distance",
                "body_part_x",
                "body_part_y",
                "camera",
                "change_ID",
                "close_camera",
                "close_windows",
                "cnt_area",
                "cnt_center",
                "cnt_draw",
                "color_detect",
                "color_detect_init",
                "decodeDisplay",
                "delay",
                "detect",
                "dilation",
                "dotted_line1",
                "dotted_line2",
                "erosion",
                "erweima_detect",
                "face_cap",
                "face_detect",
                "face_detect_init",
                "face_mask",
                "find_Contour",
                "finger_distance",
                "finger_init",
                "get_data",
                "get_frame",
                "get_img",
                "get_info",
                "get_shape",
                "getpos",
                "img_flip",
                "img_type",
                "line_angle1",
                "line_angle2",
                "model_",
                "model_recognize",
                "name_windows",
                "offset1",
                "offset2",
                "offset_calculate1",
                "offset_calculate2",
                "onnx_detect_new",
                "predict",
                "predict_init",
                "resize",
                "set_hsv",
                "setcolorvalue",
                "show_image",
                "train",
                "write_image"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "Img",
            "libraryList": [
                "BGR2GRAY",
                "GRAY2BIN",
                "beauty_face",
                "bin_detect",
                "body_init",
                "body_part_distance",
                "body_part_x",
                "body_part_y",
                "camera",
                "change_ID",
                "close_camera",
                "close_windows",
                "cnt_area",
                "cnt_center",
                "cnt_draw",
                "color_detect",
                "color_detect_init",
                "decodeDisplay",
                "delay",
                "detect",
                "dilation",
                "dotted_line1",
                "dotted_line2",
                "erosion",
                "erweima_detect",
                "face_cap",
                "face_detect",
                "face_detect_init",
                "face_mask",
                "find_Contour",
                "finger_distance",
                "finger_init",
                "get_data",
                "get_frame",
                "get_img",
                "get_info",
                "get_shape",
                "getpos",
                "img_flip",
                "img_type",
                "line_angle1",
                "line_angle2",
                "model_",
                "model_recognize",
                "name_windows",
                "offset1",
                "offset2",
                "offset_calculate1",
                "offset_calculate2",
                "onnx_detect_new",
                "predict",
                "predict_init",
                "resize",
                "set_hsv",
                "setcolorvalue",
                "show_image",
                "train",
                "write_image"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "new_file",
            "libraryList": [],
            "parameterList": [
                "path"
            ],
            "Type": "Function"
        }
    ],
    [
        {
            "libraryName": "unique",
            "libraryList": [
                "Number_Convert"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Number_Convert",
            "libraryList": [
                "num_convert3",
                "operate",
                "operate1"
            ],
            "parameterList": [
                "test_strings"
            ],
            "Type": "Class"
        }
    ],
    [
        {
            "libraryName": "yuyin",
            "libraryList": [
                "AipSpeech",
                "ID",
                "Yuyin",
                "app_id",
                "app_key",
                "app_secret_key",
                "audio_path",
                "file_path",
                "hello",
                "main_path",
                "reload",
                "system_platform",
                "test",
                "txt_path"
            ],
            "parameterList": [],
            "Type": "Library"
        },
        {
            "libraryName": "Yuyin",
            "libraryList": [
                "change_vol_spd_gender",
                "change_vol_spd_gender_DUI",
                "chat",
                "downsampleWav",
                "my_record",
                "play_bufen",
                "play_music",
                "play_txt",
                "stt",
                "tts"
            ],
            "parameterList": [],
            "Type": "Class"
        },
        {
            "libraryName": "hello",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        },
        {
            "libraryName": "test",
            "libraryList": [],
            "parameterList": [],
            "Type": "Function"
        }
    ]
]